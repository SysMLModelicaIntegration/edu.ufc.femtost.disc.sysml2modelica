[comment encoding = UTF-8 /]
[**
 * 
 *  Copyright (c) 2013 Jean-Marie Gauthier and University of Franche-Comté
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *  
 *  Contributors:
 *      Jean-Marie Gauthier and University of Franche-Comté - initial API and implementation
 *
 */]
[module generateModelicaClassDefinition('http://www.femto-st.fr/disc/Modelica.ecore')]

[query public getPath(am : ModelicaClassDefinition) : String =
	if (not am.ownerModel.oclIsUndefined()) then
		'/'+am.ownerModel.name+'/'+am.name+'.mo'
	else
		if (not am.ownerPackage.oclIsUndefined()) then
			'/'+am.ownerPackage.withinClause+'/'+am.ownerPackage.name+'/'+am.name+'.mo'
		else
			''
		endif
	endif			
/]

[query public getWithin(am : ModelicaClassDefinition) : String =
	if (not am.ownerModel.oclIsUndefined()) then
		am.ownerModel.name
	else
		if (not am.ownerPackage.oclIsUndefined()) then
			am.ownerPackage.withinClause.replaceAll('/', '.').concat('.'.concat(am.ownerPackage.name))
		else
			''
		endif
	endif			
/]

[**
 * The documentation of the template generateModel.
 * @param aModel
 */]
[template public generateModelicaClassDefinition(aModelicaClassDefinition : ModelicaClassDefinition)]
[file (getPath(aModelicaClassDefinition), false, 'UTF-8')]
within [getWithin(aModelicaClassDefinition)/];

[if(aModelicaClassDefinition.isFinal)]final [/if][if(aModelicaClassDefinition.isModelicaEncapsulated)]encapsulated [/if][if(aModelicaClassDefinition.isPartial)]partial [/if][if(aModelicaClassDefinition.oclIsTypeOf(Connector) and aModelicaClassDefinition.oclAsType(Connector).isExpandable)]expandable [/if][aModelicaClassDefinition.eClass().name.toLower()/] [aModelicaClassDefinition.name/]
[for(aModelicaExtends : ExtendsClause | aModelicaClassDefinition.extends)]
[generateModelicaExtends(aModelicaExtends)/]
[/for]
[for(aModelicaComponent : ModelicaComponent | aModelicaClassDefinition.modelicaComponents)]
[generateModelicaComponent(aModelicaComponent)/]
[/for]
[if(not aModelicaClassDefinition.equationSection.oclIsUndefined())][generateEquationSection(aModelicaClassDefinition.equationSection)/][/if]
end [aModelicaClassDefinition.name/];
[/file]
[/template]

[template public generateModelicaExtends(aModelicaExtends : ExtendsClause)]
	extends [if(not aModelicaExtends.from_modelica_standard_library.oclIsUndefined())][aModelicaExtends.from_modelica_standard_library/][/if][if(not aModelicaExtends.extendedModelicaClass.oclIsUndefined())][aModelicaExtends.extendedModelicaClass.getWithin()+'.'+aModelicaExtends.extendedModelicaClass.name/][/if][if(not aModelicaExtends.modification.oclIsUndefined() and aModelicaExtends.modification <> '')] ([aModelicaExtends.modification/])[/if];
[/template]

[template public generateModelicaComponent(aModelicaComponent : ModelicaComponent)]
	[if(aModelicaComponent.isFinal)]final [/if][if(aModelicaComponent.isReplaceable)]replaceable [/if][if(aModelicaComponent.oclIsTypeOf(ModelicaValueProperty))][generateModelicaValueProperty(aModelicaComponent.oclAsType(ModelicaValueProperty))/][/if][if(aModelicaComponent.oclIsTypeOf(ModelicaPort))][generateModelicaPort(aModelicaComponent.oclAsType(ModelicaPort))/][/if][if(aModelicaComponent.oclIsTypeOf(ModelicaPart))][generateModelicaPart(aModelicaComponent.oclAsType(ModelicaPart))/][/if]
[/template]

[template public generateModelicaValueProperty(aModelicaValueProperty : ModelicaValueProperty)]
[if(aModelicaValueProperty.visibility.toString() <> 'public')][aModelicaValueProperty.visibility.toString()/] [/if][if(aModelicaValueProperty.flowFlag.toString() <> 'none')][aModelicaValueProperty.flowFlag.toString()/] [/if][if(aModelicaValueProperty.variability.toString() <> 'continuous')][aModelicaValueProperty.variability.toString()/] [/if][if(aModelicaValueProperty.causality.toString() <> 'none')][aModelicaValueProperty.causality.toString()/] [/if][aModelicaValueProperty.type_specifier/] [aModelicaValueProperty.name/][if(not aModelicaValueProperty.modification.oclIsUndefined() and aModelicaValueProperty.modification <> '')] ([aModelicaValueProperty.modification/])[/if][if(aModelicaValueProperty.default_value <> 'null' and not aModelicaValueProperty.default_value.oclIsUndefined())] = [aModelicaValueProperty.default_value/][/if];
[/template]

[template public generateModelicaPort(aModelicaPort : ModelicaPort)]
[if(aModelicaPort.causality.toString() <> 'none')][aModelicaPort.causality.toString()/] [/if][aModelicaPort.type_specifier/] [aModelicaPort.name/][if(not aModelicaPort.modification.oclIsUndefined() and aModelicaPort.modification <> '')] ([aModelicaPort.modification/])[/if][if(not aModelicaPort.conditionalExpression.oclIsUndefined() and aModelicaPort.conditionalExpression <> '')] [aModelicaPort.conditionalExpression/][/if];
[/template]

[template public generateModelicaPart(aModelicaPart : ModelicaPart)]
[if(aModelicaPart.visibility.toString() <> 'public')][aModelicaPart.visibility.toString()/] [/if][aModelicaPart.type_specifier/] [aModelicaPart.name/][if(not aModelicaPart.modification.oclIsUndefined() and aModelicaPart.modification <> '')] ([aModelicaPart.modification/])[/if];
[/template]

[template public generateEquationSection(aEquationSection : EquationSection)]
equation
	[for(aConnects : Connect | aEquationSection.connects)][generateConnect(aConnects)/]
[/for]
	[for(aEquation : Equation | aEquationSection.equations->select(e | not e.isInitial))][generateEquation(aEquation)/]
[/for]
[if(aEquationSection.equations->exists(e | e.isInitial))]
initial equation
	[for(aEquation : Equation | aEquationSection.equations->select(e | e.isInitial))][generateEquation(aEquation)/]
[/for]
[/if]
[/template]

[template public generateConnect(aConnect : Connect)]
	connect([if(not aConnect.fromModelicaPart.oclIsUndefined())][aConnect.fromModelicaPart.name/][if(not aConnect.from.oclIsUndefined() or not aConnect.fromPort.oclIsUndefined())].[/if][/if][if(not aConnect.fromPart.oclIsUndefined())][aConnect.fromPart/][if(not aConnect.from.oclIsUndefined() or not aConnect.fromPort.oclIsUndefined())].[/if][/if][if(not aConnect.from.oclIsUndefined())][aConnect.from.name/][/if][if(not aConnect.fromPort.oclIsUndefined())][aConnect.fromPort/][/if], [if(not aConnect.toModelicaPart.oclIsUndefined())][aConnect.toModelicaPart.name/][if(not aConnect.to.oclIsUndefined() or not aConnect.toPort.oclIsUndefined())].[/if][/if][if(not aConnect.toPart.oclIsUndefined())][aConnect.toPart/][if(not aConnect.to.oclIsUndefined() or not aConnect.toPort.oclIsUndefined())].[/if][/if][if(not aConnect.to.oclIsUndefined())][aConnect.to.name/][/if][if(not aConnect.toPort.oclIsUndefined())][aConnect.toPort/][/if]);
[/template]

[template public generateEquation(aEquation : Equation)]
	[aEquation._body/];
[/template]